""" 
Reserved Words
- input
- continue
- break

- - - - - - - - - - - - - - - - - - - - - - - - - - - 

You can use:
name:.2f -> gives money formatt
name:<8  -> pushes out to the left
name:>8  -> pushes out to the right
name:^8  -> centers
name:08  -> this will give it multiple digets of integers.

- - - - - - - - - - - - - - - - - - - - - - - - - - - 
(Casting) Type Casting/Type Conversion methods:

int()
str()
float()
bool()

import random
print(random.randrange(1,10)) <- this will make it so that you get random numbers between 1-10.

import calendar
rng = calendar.monthrange(year, month)

from calendar import monthrange
rng = monthrange(year, month)

import calendar as cal     <- Module Aliases
val = cal.monthrange(year, month)


- - - - - - - - - - - - - - - - - - - - - - - - - - - 
Writing/reading to files:

a_file = open('example_file/held_information.txt', 'rt')
print(a_file.read())

.readline()
.readlines()
.strip()
.split()

words[1:] -> this creates a list (slicing)
- - - - - - - - - - - - - - - - - - - - - - - - - - - 
.sort()
.sort(reverse=True) <- returns new distructive list
.sorted() <- returns sorted list saved in a variable
dict.clear() <- removes all data

print(len(dict))  # <- this will give you back how many keys are at that level
print(dict.get('active', 'not found'))  # <- this is better because it'll error handle if the value wasn't found & has default error handling if desired with the second parameter
print(dict.items())  # <- this will give back a list of tuples with the key:value
dict.update(dict_2)  # <- this is destructive

- - - - - - - - - - - - - - - - - - - - - - - - - - - 
** Python Arithmetic Operators
Mathematics 

| Operation      | Operator | Example |
| -------------- | -------- | ------- |
| Addition       |    +     |  x + y  | <- basic adding 
| Subtraction    |    -     |  x - y  | <- basic subtracting 
| Multiplication |    *     |  x * y  | <- basic mutiplication 
| Division       |    /     |  x / y  | <- basic division with a remainder
| Modulus        |    %     |  x % y  | <- how many time can a number go evenly into an other, Note: if you get a 0 its evenly divisible
| Exponent       |    **    |  x ** y | <- 2**5 translates to 2*2*2*2*2 . Note: Exponent operator ** in Python works in the same way as the pow(a, b) function.
| Floor Division |    //    |  x // y | <- this will give you back a whole number
| -------------- | -------- | ------- | 

** Order of Operations **

Parentheses
Exponents
Multiplication
Division
Addition
Subtraction

Useful Links:
https://www.w3schools.com/python/gloss_python_arithmetic_operators.asp
https://floating-point-gui.de/formats/fp/
https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
https://www.codecademy.com/resources/docs/python/conditionals
Kodify: Testing Multiple Conditionals

** Boolean Order of Operations **
Parentheses (  )
NOT
AND
OR
left-to-right

- - - - - - - - - - - - - - - - - - - - - - - - - - - 

** Python Arithmetic Operators
Arithmetic operators are used with numeric values to perform common mathematical operations:

Operator	Name	            Example	
   +   	  Addition	        x + y	
   -   	  Subtraction	      x - y	
   *   	  Multiplication	  x * y	
   /   	  Division	        x / y	
   %   	  Modulus	          x % y	
   **	    Exponentiation	  x ** y	
   //	    Floor division	  x // y	



** Python Assignment Operators
Assignment operators are used to assign values to variables:

Operator	Example	Same As	Try it
=	x = 5	x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3	
%=	x %= 3	x = x % 3	
//=	x //= 3	x = x // 3	
**=	x **= 3	x = x ** 3	
&=	x &= 3	x = x & 3	
|=	x |= 3	x = x | 3	
^=	x ^= 3	x = x ^ 3	
>>=	x >>= 3	x = x >> 3	
<<=	x <<= 3	x = x << 3	

** Python Comparison Operators
Comparison operators are used to compare two values:

Operator	Name	Example	Try it
==	Equal	x == y	
!=	Not equal	x != y	
>	Greater than	x > y	
<	Less than	x < y	
>=	Greater than or equal to	x >= y	
<=	Less than or equal to	x <= y	

** Python Logical Operators
Logical operators are used to combine conditional statements:

Operator	Description	Example	Try it
and 	Returns True if both statements are true	x < 5 and  x < 10	
or	Returns True if one of the statements is true	x < 5 or x < 4	
not	Reverse the result, returns False if the result is true	not(x < 5 and x < 10)	

** Python Identity Operators
Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:

Operator	Description	Example	Try it
is 	Returns True if both variables are the same object	x is y	
is not	Returns True if both variables are not the same object	x is not y	

** Python Membership Operators
Membership operators are used to test if a sequence is presented in an object:

Operator	Description	Example	Try it
in 	Returns True if a sequence with the specified value is present in the object	x in y	
not in	Returns True if a sequence with the specified value is not present in the object	x not in y	

** Python Bitwise Operators
Bitwise operators are used to compare (binary) numbers:

Operator	Name	Description	Example	Try it
& 	AND	Sets each bit to 1 if both bits are 1	x & y	
|	OR	Sets each bit to 1 if one of two bits is 1	x | y	
^	XOR	Sets each bit to 1 if only one of two bits is 1	x ^ y	
~	NOT	Inverts all the bits	~x	
<<	Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off	x << 2	
>>	Signed right shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off	x >> 2	

- - - - - - - - - - - - - - - - - - - - - - - - - - - 

####################
# my_module.py
####################
team = {
  "school": "BYU",
  "mascot": "Cougars,
  "city": "Provo",
  "state": "Utah"
}

####################
# main.py
####################
import my_module

school = my_module.team["school"]
print(school)

BYU






"""
# I'm aware this is a text file so I don't need to use a comment formatt to write out info but I just feel like it because the text is in color(: